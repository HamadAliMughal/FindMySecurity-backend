

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  email                  String                  @unique
  password               String
  roleId                 Int
  role                   Role                    @relation("UserRole", fields: [roleId], references: [id]) // Named relation
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  roleUsers              RoleUser[]
  individualProfessional IndividualProfessional? // For IndividualProfessional data
  client                 Client?                 // For Client data (no extra fields)
  securityCompany        SecurityCompany?        // For SecurityCompany data
  courseProvider         CourseProvider?         // For CourseProvider data
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRole") // Opposite relation name
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  RoleUser    RoleUser[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  roles     Role[]   @relation("RolePermissions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IndividualProfessional {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  profileData Json     // Profile data for Individual Professional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ClientAd  ClientAd[] // Optional relationship for Client Ads
}

model SecurityCompany {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id])
  companyData Json       // Company data for SecurityCompany
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ServiceAd   ServiceAd[] // Optional relationship for Security Company Ads
}

model CourseProvider {
  id           Int        @id @default(autoincrement())
  userId       Int        @unique
  user         User       @relation(fields: [userId], references: [id])
  providerData Json       // Provider data for CourseProvider
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  CourseAd     CourseAd[] // Optional relationship for CourseProvider Ads
}

model CourseAd {
  id               Int            @id @default(autoincrement())
  courseProviderId Int
  courseProvider   CourseProvider @relation(fields: [courseProviderId], references: [id])
  title            String
  description      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model ServiceAd {
  id                Int             @id @default(autoincrement())
  securityCompanyId Int
  securityCompany   SecurityCompany @relation(fields: [securityCompanyId], references: [id])
  title             String
  description       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ClientAd {
  id          Int      @id @default(autoincrement())
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RoleUser {
  id        Int      @id @default(autoincrement())
  roleId    Int
  userId    Int
  validated Boolean? @default(false)
  userType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
