# serverless.yml
service: findmysecurity-backend

provider:
  name: aws
  runtime: nodejs16.x
  region: ${opt:region, env:AWS_DEFAULT_REGION, 'eu-north-1'}
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  logRetentionInDays: 14
  apiGateway:
    shouldStartNameWithService: true
  role: !GetAtt LambdaRole.Arn
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    skipPolicySetup: false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
    name: findmysecurity-backend-${opt:stage, 'dev'} # Deployment bucket name. Default is generated by the framework
    maxPreviousDeploymentArtifacts: 3 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    versioning: false # enable bucket versioning. Default is false
    # serverSideEncryption: AES256 # server-side encryption method
    # sseKMSKeyId: arn:aws:kms:us-east-2:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa # when using server-side encryption
    # sseCustomerAlgorithim: AES256 # when using server-side encryption and custom keys
    # sseCustomerKey: string # when using server-side encryption and custom keys
    # sseCustomerKeyMD5: md5sum # when using server-side encryption and custom keys
    tags: # Tags that will be added to each of the deployment resources
      name: ${self:service}-${self:provider.stage}
      stage: ${self:provider.stage}
      Key: Environment
      Value: ${self:provider.stage}
  deploymentPrefix: findmysecurity-backend
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
      allowedMethods:
        - GET
        - POST
        - PATCH
        - PUT
        - DELETE
        - OPTIONS
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:SECRET_TOKEN_DEV, env:SESSION_SECRET}
    PORT: ${env:PORT, '4000'}
    SESSION_SECRET: ${env:SESSION_SECRET}
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_PHONE_NUMBER: ${env:TWILIO_PHONE_NUMBER}
    PORT_SMTP_TEST: ${env:PORT_SMTP_TEST}
    CLIENT_URL: ${env:CLIENT_URL}
    S3_ROUTE: ${env:S3_ROUTE}
    SES_SOURCE_EMAIL: ${env:SES_SOURCE_EMAIL}
plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-webpack-prisma

functions:
  - ${file(./serverless/functions.yml)}
resources:
  - ${file(./serverless/resources.yml)}

# Configure esbuild
package:
  individually: true

build:
  esbuild: false

custom:
  serverless-offline:
    ignoreJWTSignature: true
    lambdaTimeout: 900
    httpPort: 4000
    apiGateway:
      websocket:
        timeout: 900000
    httpTimeoutMillis: 900000

  serverlessOffline:
    noPrependStageInUrl: true
  webpack:
    packagerOptions:
      noFrozenLockfile: true
    scripts:
      - prisma generate
    webpackConfig: './webpack.config.js'
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
        - '@types/node'
      forceInclude:
        - class-transformer
